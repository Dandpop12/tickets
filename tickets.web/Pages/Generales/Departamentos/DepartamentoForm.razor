@inject SweetAlertService sweetAlertService

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudTextField @bind-Value="@Model.Descripcion" For="@(() => @Model.Descripcion)" Label="Departamento" Variant="Variant.Text" Margin="Margin.Dense" HelperText="Descripción o nombre" HelperTextOnFocus="true" Required="true" Clearable="true"></MudTextField>

    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="pt-4">
        <MudButton Disabled="@IsLoading" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">
            @if (IsLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Guardando</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Save" Title="Guardar" Size="Size.Small" Class="mr-3" />
                <MudText>Guardar</MudText>
            }
        </MudButton>

        <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Info" OnClick="ReturnAction">
            Volver
        </MudButton>
    </MudStack>
</EditForm>

@code {

    private EditContext editContext = null!;

    [Parameter]
    [EditorRequired]
    public Generales_Departamentos Model { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override void OnInitialized()
    {
        editContext = new(Model);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();
        if (!formWasModified || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Volver atrás",
                CancelButtonColor = "#1E88E5",
                ConfirmButtonText = "Si, abandonar página",
                ConfirmButtonColor = "#43A047"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

}

