@page "/changePassword"
@inject IRepository repository
@inject ISnackbar Snackbar
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@attribute [Authorize]

@if (loading)
{
    <Loader />
}
<div class="row">
    <div class="col-12">
        <EditForm Model="changePasswordDTO" OnValidSubmit="ChangePasswordAsync">
            <DataAnnotationsValidator />

            <MudText Typo="Typo.h5">
                <MudIcon Icon="@Icons.Material.Filled.Lock" Title="Guardar" Size="Size.Small" Class="mr-3" /> Modificar Contraseña
            </MudText>

            <MudDivider DividerType="DividerType.Middle" Class="my-4" />


            <MudTextField @bind-Value="@changePasswordDTO.CurrentPassword" For="@(() => @changePasswordDTO.CurrentPassword)" Label="Contraseña actual" Variant="Variant.Text" Margin="Margin.Dense" HelperText="Digite su contraseña actual" HelperTextOnFocus="true" Required="true" Clearable="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="MostrarPass" AdornmentAriaLabel="Show Password" InputType="@PasswordInput"></MudTextField>

            <MudTextField @bind-Value="@changePasswordDTO.NewPassword" For="@(() => @changePasswordDTO.NewPassword)" Label="Nueva contraseña" Variant="Variant.Text" Margin="Margin.Dense" HelperText="Digite su nueva contraseña" HelperTextOnFocus="true" Required="true" Clearable="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="MostrarPass" AdornmentAriaLabel="Show Password" InputType="@PasswordInput"></MudTextField>

            <MudTextField @bind-Value="@changePasswordDTO.Confirm" For="@(() => @changePasswordDTO.Confirm)" Label="Confirme su nueva contraseña" Variant="Variant.Text" Margin="Margin.Dense" HelperText="Confirme su nueva contraseña" HelperTextOnFocus="true" Required="true" Clearable="true" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="MostrarPass" AdornmentAriaLabel="Show Password" InputType="@PasswordInput"></MudTextField>

            <MudStack Row="true" Justify="Justify.SpaceBetween" Class="pt-4">
                <MudButton Disabled="@loading" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">
                    @if (loading)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Guardando</MudText>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Save" Title="Guardar" Size="Size.Small" Class="mr-3" />
                        <MudText>Guardar</MudText>
                    }
                </MudButton>

                <MudButton Href="/userdetails" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Info">
                    Volver
                </MudButton>
            </MudStack>


        </EditForm>
    </div>
</div>

@code {
    private ChangePasswordDTO changePasswordDTO = new();
    private bool loading;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    private async Task ChangePasswordAsync()
    {
        loading = true;
        var responseHttp = await repository.Post("/api/accounts/changePassword", changePasswordDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            loading = false;
            return;
        }

        await BlazoredModal.CloseAsync(ModalResult.Ok());
        loading = false;
        navigationManager.NavigateTo("/userdetails");
        var toast = sweetAlertService.Mixin(new SweetAlertOptions
        {
            Toast = true,
            Position = SweetAlertPosition.TopEnd,
            ShowConfirmButton = true,
            Timer = 5000
        });

        ToastLoad("Contraseñá modificada con éxito", MudBlazor.Severity.Success);

    }

        private void ToastLoad(string Title, MudBlazor.Severity severity)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.TopEnd;
        Snackbar.Add(Title, severity);
    }


    void MostrarPass()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}