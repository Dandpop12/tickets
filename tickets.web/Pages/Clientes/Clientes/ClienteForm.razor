@inject SweetAlertService sweetAlertService
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />

<EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudTextField @bind-Value="@Model!.Nombre" For="@(() => @Model!.Nombre)" Label="Nombre" Variant="Variant.Text" Margin="Margin.Dense" Required="true" Clearable="true" />

    <MudStack Row="true">
        <MudTextField @bind-Value="@Model!.RNC" For="@(() => @Model!.RNC)" Label="RNC" Variant="Variant.Text" Margin="Margin.Dense" Required="true" Clearable="true" />

        <MudTextField Mask="@(new PatternMask("(000) 000 0000"))" @bind-Value="@Model!.Telefono" For="@(() => @Model!.Telefono)" Label="Teléfono" Variant="Variant.Text" Margin="Margin.Dense" Clearable="true" />
    </MudStack>

    <MudTextField @bind-Value="@Model!.Correo" For="@(() => @Model!.Correo)" Label="Correo" Variant="Variant.Text" Margin="Margin.Dense" Clearable="true" />


    <MudTextField Lines="2" @bind-Value="@Model!.Direccion" For="@(() => @Model!.Direccion)" Label="Dirección" Variant="Variant.Text" Margin="Margin.Dense" Clearable="true" />

    <MudTextField Lines="2" @bind-Value="@Model!.Notas" For="@(() => @Model!.Notas)" Label="Notas" Variant="Variant.Text" Margin="Margin.Dense" Clearable="true" />

    <MudSelect For="@(() => @Model.ClasificacionId)" @bind-Value="@(Model!.ClasificacionId)" Required="true" Label="Clasificacioón" Dense="true" Placeholder="Seleccione una clasificación" AnchorOrigin="Origin.BottomCenter">

        @if (clasificaciones is not null)
        {
            @foreach (var clasificacion in clasificaciones)
            {
                <MudSelectItem Value="@clasificacion.Id">@clasificacion.Descripcion</MudSelectItem>
            }
        }
    </MudSelect>

@*    <MudRadioGroup For="@(() => @Model!.ClasificacionId)" @bind-SelectedOption="@(Model!.ClasificacionId)">
        @if (clasificaciones is not null)
        {
            @foreach (var clasificacion in clasificaciones)
            {
                <MudRadio Option="clasificacion.Id">@clasificacion.Descripcion</MudRadio>
            }
        }
    </MudRadioGroup>
*@
    <MudRadioGroup For="@(() => @Model!.Estado)" @bind-SelectedOption="@(Model!.Estado)">
        <MudRadio Option="EstadosGenerales.Activo" Color="Color.Success">Activo</MudRadio>
        <MudRadio Option="EstadosGenerales.Inactivo" Color="Color.Error">Inactivo</MudRadio>
    </MudRadioGroup>

    <MudStack Row="true" Justify="Justify.SpaceBetween" Class="pt-4">
        <MudButton Disabled="@IsLoading" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success">

            @if (IsLoading)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Guardando</MudText>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Save" Title="Guardar" Size="Size.Small" Class="mr-3" />
                <MudText>Guardar</MudText>
            }
        </MudButton>

        <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.ArrowBack" Variant="Variant.Filled" Color="Color.Info" OnClick="ReturnAction">
            Volver
        </MudButton>
    </MudStack>
</EditForm>

@code {

    private EditContext editContext = null!;
    private List<Clientes_Clasificacion>? clasificaciones;

    [Parameter]
    [EditorRequired]
    public Clientes? Model { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    public bool FormPostedSuccessfully { get; set; }

    protected override async Task OnInitializedAsync()
    {
        editContext = new(Model!);
        await LoadClasificacionesAsync();
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasModified = editContext.IsModified();
        if (!formWasModified || FormPostedSuccessfully)
        {
            return;
        }

        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "Volver atrás",
                CancelButtonColor = "#1E88E5",
                ConfirmButtonText = "Si, abandonar página",
                ConfirmButtonColor = "#43A047"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }

    private async Task LoadClasificacionesAsync()
    {
        var responseHttp = await repository.Get<List<Clientes_Clasificacion>>("/api/clasificaciones/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        clasificaciones = responseHttp.Response;
    }

}

